/*
Copyright 2021 The KubeVela Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/oam-dev/kubevela-core-api/apis/core.oam.dev/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InitializerLister helps list Initializers.
// All objects returned here must be treated as read-only.
type InitializerLister interface {
	// List lists all Initializers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Initializer, err error)
	// Initializers returns an object that can list and get Initializers.
	Initializers(namespace string) InitializerNamespaceLister
	InitializerListerExpansion
}

// initializerLister implements the InitializerLister interface.
type initializerLister struct {
	indexer cache.Indexer
}

// NewInitializerLister returns a new InitializerLister.
func NewInitializerLister(indexer cache.Indexer) InitializerLister {
	return &initializerLister{indexer: indexer}
}

// List lists all Initializers in the indexer.
func (s *initializerLister) List(selector labels.Selector) (ret []*v1beta1.Initializer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Initializer))
	})
	return ret, err
}

// Initializers returns an object that can list and get Initializers.
func (s *initializerLister) Initializers(namespace string) InitializerNamespaceLister {
	return initializerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InitializerNamespaceLister helps list and get Initializers.
// All objects returned here must be treated as read-only.
type InitializerNamespaceLister interface {
	// List lists all Initializers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Initializer, err error)
	// Get retrieves the Initializer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Initializer, error)
	InitializerNamespaceListerExpansion
}

// initializerNamespaceLister implements the InitializerNamespaceLister
// interface.
type initializerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Initializers in the indexer for a given namespace.
func (s initializerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Initializer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Initializer))
	})
	return ret, err
}

// Get retrieves the Initializer from the indexer for a given namespace and name.
func (s initializerNamespaceLister) Get(name string) (*v1beta1.Initializer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("initializer"), name)
	}
	return obj.(*v1beta1.Initializer), nil
}
